FROM kirito1/qwen3-coder

# Using a more standard instruction-following template.
# This is the most likely part you might need to change if the model is unresponsive.
TEMPLATE """{{- if .FIM }}
<|im_start|>assistant
{{ .FIM.Prefix }}{{ .Response }}{{ .FIM.Suffix }}<|im_end|>
{{- else if .Messages }}
{{- if or .System .Tools }}<|im_start|>system
{{- if .System }}
{{ .System }}
{{- end }}
{{- if .Tools }}

# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{{- range .Tools }}
{"type": "function", "function": {{ .Function }}}
{{- end }}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call>
{{- end }}<|im_end|>
{{ end }}
{{- range $i, $_ := .Messages }}
{{- $last := eq (len (slice $.Messages $i)) 1 -}}
{{- if eq .Role "user" }}<|im_start|>user
{{ .Content }}<|im_end|>
{{ else if eq .Role "assistant" }}<|im_start|>assistant
{{ if .Content }}{{ .Content }}
{{- else if .ToolCalls }}<tool_call>
{{ range .ToolCalls }}{"name": "{{ .Function.Name }}", "arguments": {{ .Function.Arguments }}}
{{ end }}</tool_call>
{{- end }}{{ if not $last }}<|im_end|>
{{ end }}
{{- else if eq .Role "tool" }}<|im_start|>tool
<tool_response>
{{ .Content }}
</tool_response><|im_end|>
{{ end }}
{{- if and (ne .Role "assistant") $last }}<|im_start|>assistant
{{ end }}
{{- end }}
{{- else }}
{{- if .System }}<|im_start|>system
{{ .System }}<|im_end|>
{{ end }}{{ if .Prompt }}<|im_start|>user
{{ .Prompt }}<|im_end|>
{{ end }}<|im_start|>assistant
{{ end }}{{ .Response }}{{ if .Response }}<|im_end|>{{ end }}
"""

# The SYSTEM prompt logic remains the same.
SYSTEM """You are an AI assistant that can use tools.
When you need to use a tool, you MUST respond with a single JSON object.
This JSON object must have a single key called "tool_code".
The value of "tool_code" must be a string containing the Python code to execute.
Do NOT add any other text, explanations, or markdown formatting.

Correct format:
{"tool_code": "print(default_api.list_directory(path='.'))"}

Incorrect format (do NOT do this):
I need to list the files, so I will use the `list_directory` tool.
```json
{"tool_code": "print(default_api.list_directory(path='.'))"}
```

Another correct example:
{"tool_code": "print(default_api.read_file(absolute_path='/path/to/file.txt'))"}
"""

# This is the critical part: You must teach the model to speak like the Gemini API
SYSTEM """You are a helpful assistant that has access to a set of tools.
To use a tool, you must respond with a single, valid JSON object.
The JSON object must have a single key, "tool_code", and its value must be the exact Python code to execute.
Do not add any other text, explanations, or markdown formatting around the JSON object.

For example, if you need to list files, you must respond with:
{"tool_code": "print(default_api.list_directory(path='.'))"}

If you need to read a file, you must respond with:
{"tool_code": "print(default_api.read_file(absolute_path='/path/to/file.txt'))"}
"""

# Set parameters for the model
PARAMETER stop "<|im_start|>"
PARAMETER stop "<|im_end|>"