#!/bin/sh

# Check for any unstaged changes in tracked files
MODIFIED_UNSTAGED_FILES=$(git diff --name-only)
if [ -n "$MODIFIED_UNSTAGED_FILES" ]; then
  echo "Error: There are unstaged changes in tracked files:" >&2
  echo "$MODIFIED_UNSTAGED_FILES" >&2
  echo "Please stage all relevant files before committing." >&2
  exit 1
fi

# Check for any new, untracked files (that are not ignored)
NEW_UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
if [ -n "$NEW_UNTRACKED_FILES" ]; then
  echo "Error: There are new untracked files:" >&2
  echo "$NEW_UNTRACKED_FILES" >&2
  echo "Please stage or gitignore these files before committing." >&2
  exit 1
fi

# Staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check if DEVLOG.md is staged for commit
if ! echo "$STAGED_FILES" | grep -q "DEVLOG.md"; then
  echo "Error: DEVLOG.md has not been updated or staged." >&2
  echo "Please update the devlog and stage it before committing." >&2
  exit 1
fi

# Check if TASKS.md is staged for commit
if ! echo "$STAGED_FILES" | grep -q "TASKS.md"; then
  echo "Error: TASKS.md has not been updated or staged." >&2
  echo "Please update the tasks list and stage it before committing." >&2
  exit 1
fi

# Check if src/gemini-cli submodule is pushed
cd src/gemini-cli || exit 1
if [ "$(git rev-parse @)" != "$(git rev-parse @{u})" ]; then
  echo "Error: src/gemini-cli submodule is not pushed to its remote." >&2
  echo "Please cd into src/gemini-cli and run 'git push' before committing." >&2
  exit 1
fi
cd ../.. || exit 1

exit 0
